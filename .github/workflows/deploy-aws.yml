name: Deploy to AWS EC2

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy"
        required: true
        default: develop
      run_migrations:
        description: "Run Liquibase migrations"
        type: boolean
        required: true
        default: true

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      EC2_HOST: ${{ vars.EC2_HOST }}
      EC2_USER: ${{ vars.EC2_USER }}
      SERVER_PORT: ${{ vars.SERVER_PORT }}
      LOCAL_DB: ${{ vars.LOCAL_DB }}
      DB_NAME: ${{ vars.DB_NAME }}
      DB_USERNAME: ${{ vars.DB_USERNAME }}
      JWT_BASE64_SECRET: ${{ secrets.JWT_BASE64_SECRET }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Build application (Gradle or Maven)
        id: build
        shell: bash
        run: |
          set -euo pipefail
          if [ -x ./gradlew ]; then
            chmod +x ./gradlew
            ./gradlew bootJar -x test
            JAR_PATH=$(ls -1 build/libs/*.jar | head -n1)
          else
            chmod +x ./mvnw || true
            ./mvnw -DskipTests package
            JAR_PATH=$(ls -1 target/*.jar | grep -v sources | grep -v original | head -n1)
          fi
          if [ -z "${JAR_PATH:-}" ]; then
            echo "No JAR produced" >&2
            exit 1
          fi
          echo "jar_path=$JAR_PATH" >> "$GITHUB_OUTPUT"
          echo "Built: $JAR_PATH"

      - name: Prepare SSH key
        shell: bash
        run: |
          umask 077
          echo "${{ secrets.EC2_SSH_KEY }}" > ssh_key.pem
          chmod 600 ssh_key.pem

      - name: Copy JAR to EC2
        shell: bash
        run: |
          set -euo pipefail
          JAR="${{ steps.build.outputs.jar_path }}"
          HOST="${EC2_HOST}"
          USER_NAME="${EC2_USER:-ubuntu}"
          if [ -z "$HOST" ]; then echo "EC2_HOST variable is not set" >&2; exit 1; fi
          ssh -i ssh_key.pem -o StrictHostKeyChecking=no "$USER_NAME@$HOST" "mkdir -p ~/app"
          scp -i ssh_key.pem -o StrictHostKeyChecking=no "$JAR" "$USER_NAME@$HOST:~/app/edupress.jar"

      - name: Configure Java/Postgres/systemd on EC2 and restart service
        shell: bash
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          set -euo pipefail
          HOST="${EC2_HOST}"
          USER_NAME="${EC2_USER:-ubuntu}"
          PORT="${SERVER_PORT:-8081}"
          LOCAL_DB_FLAG="${LOCAL_DB:-true}"
          DB_NAME_VAL="${DB_NAME:-edupress}"
          DB_USER_VAL="${DB_USERNAME:-edupress}"
          JWT_SECRET_VAL="${JWT_BASE64_SECRET}"

          ssh -i ssh_key.pem -o StrictHostKeyChecking=no "$USER_NAME@$HOST" \
            "PORT='${PORT}' LOCAL_DB_FLAG='${LOCAL_DB_FLAG}' DB_NAME_VAL='${DB_NAME_VAL}' DB_USER_VAL='${DB_USER_VAL}' DB_PASSWORD='${DB_PASSWORD}' JWT_SECRET_VAL='${JWT_SECRET_VAL}' bash -s" << 'EOF'
          set -euo pipefail

          install_java() {
            if command -v java >/dev/null 2>&1; then return; fi
            if command -v dnf >/dev/null 2>&1; then
              sudo dnf install -y java-21-amazon-corretto-headless || \
              sudo dnf install -y java-17-amazon-corretto-headless || true
            fi
            if ! command -v java >/dev/null 2>&1; then
              if command -v amazon-linux-extras >/dev/null 2>&1; then
                sudo amazon-linux-extras enable corretto21 || sudo amazon-linux-extras enable corretto17 || true
                sudo yum clean metadata || true
                sudo yum install -y java-21-amazon-corretto-headless || \
                sudo yum install -y java-17-amazon-corretto-headless || true
              elif command -v apt-get >/dev/null 2>&1; then
                sudo apt-get update -y
                sudo apt-get install -y openjdk-21-jre-headless || sudo apt-get install -y openjdk-17-jre-headless
              elif command -v yum >/dev/null 2>&1; then
                sudo yum install -y java-21-openjdk-headless || \
                sudo yum install -y java-17-openjdk-headless || \
                sudo yum install -y java-11-openjdk-headless || true
              else
                echo "Package manager not found; ensure Java is installed" >&2
              fi
            fi
            if ! command -v java >/dev/null 2>&1; then
              echo "Java installation failed" >&2
              exit 1
            fi
          }

          configure_postgres() {
            if [ "${LOCAL_DB_FLAG}" = "true" ]; then
              if command -v psql >/dev/null 2>&1; then
                echo "PostgreSQL already present"
              else
                if command -v apt-get >/dev/null 2>&1; then
                  sudo apt-get update -y
                  sudo apt-get install -y postgresql postgresql-contrib
                elif command -v yum >/dev/null 2>&1; then
                  sudo yum install -y postgresql-server postgresql-contrib
                  sudo /usr/bin/postgresql-setup --initdb || true
                  sudo systemctl enable postgresql || sudo systemctl enable postgresql.service || true
                  sudo systemctl start postgresql || true
                fi
              fi
              # Create DB and user if not exist
              sudo -u postgres psql -tc "SELECT 1 FROM pg_database WHERE datname='${DB_NAME_VAL}'" | grep -q 1 || sudo -u postgres createdb "${DB_NAME_VAL}"
              sudo -u postgres psql -tc "SELECT 1 FROM pg_roles WHERE rolname='${DB_USER_VAL}'" | grep -q 1 || sudo -u postgres psql -c "CREATE USER ${DB_USER_VAL} WITH PASSWORD '${DB_PASSWORD}';"
              sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${DB_NAME_VAL} TO ${DB_USER_VAL};" || true
            fi
          }

          write_service() {
            APP_DIR="/home/${USER}/app"
            sudo bash -c "cat > /etc/systemd/system/edupress.service" <<SVC
          [Unit]
          Description=Edupress Spring Boot service
          After=network.target

          [Service]
          User=${USER}
          WorkingDirectory=${APP_DIR}
          Environment=SPRING_PROFILES_ACTIVE=prod
          Environment=SERVER_PORT=${PORT}
          Environment=JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET=${JWT_SECRET_VAL}
          Environment=SPRING_LIQUIBASE_ENABLED="${{ github.event.inputs.run_migrations }}"
          Environment=SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5432/${DB_NAME_VAL}
          Environment=SPRING_DATASOURCE_USERNAME=${DB_USER_VAL}
          Environment=SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
          ExecStart=/usr/bin/java -jar ${APP_DIR}/edupress.jar --server.port=${PORT}
          Restart=always
          RestartSec=5
          LimitNOFILE=100000

          [Install]
          WantedBy=multi-user.target
          SVC
            sudo systemctl daemon-reload
            sudo systemctl enable edupress || true
            sudo systemctl restart edupress || sudo systemctl start edupress
            sleep 3
            sudo systemctl status edupress --no-pager || true
          }

          open_firewall() {
            if command -v ufw >/dev/null 2>&1; then
              sudo ufw allow ${PORT}/tcp || true
              sudo ufw reload || true
            fi
          }

          mkdir -p ~/app
          install_java
          configure_postgres
          open_firewall
          write_service
          touch "${APP_DIR}/app.log" || true
          tail -n 200 "${APP_DIR}/app.log" || true
          EOF

      - name: Health check
        shell: bash
        run: |
          set -e
          HOST="${EC2_HOST}"
          PORT="${SERVER_PORT:-8081}"
          echo "Waiting for app on http://$HOST:$PORT"
          for i in {1..30}; do
            if curl -fsS --max-time 3 "http://$HOST:$PORT" >/dev/null; then
              echo "App is reachable"
              exit 0
            fi
            sleep 3
          done
          echo "App not reachable on $PORT after timeouts" >&2
          exit 1
