name: Deploy to AWS EC2 (systemd)

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy"
        required: false
        default: develop
      prepare_only:
        description: "Prepare EC2 once (install Java/Postgres, create service) without deploying a new JAR"
        required: true
        type: boolean
        default: false
  push:
    branches:
      - master
      - develop

permissions:
  contents: read

jobs:
  deploy-aws:
    runs-on: ubuntu-latest
    env:
      EC2_HOST: ${{ vars.EC2_HOST }}
      EC2_USER: ${{ vars.EC2_USER }}
      SERVER_PORT: ${{ vars.SERVER_PORT || '8080' }}
      # Default to external managed Postgres (Aiven). Set repo variable LOCAL_DB=true only if you want local Postgres.
      LOCAL_DB: ${{ vars.LOCAL_DB || 'false' }}
      DB_NAME: ${{ vars.DB_NAME || 'defaultdb' }}
      DB_USERNAME: ${{ vars.DB_USERNAME }}
    steps:
      - name: Workflow banner
        shell: bash
        run: |
          echo "[Deploy Workflow] version=v2 systemd-corretto; commit=${GITHUB_SHA}"
      - name: Checkout
        uses: actions/checkout@v4
        if: ${{ github.event_name == 'push' || github.event.inputs.branch == '' || github.event.inputs.branch == null }}

      - name: Checkout (manual branch)
        uses: actions/checkout@v4
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch != '' }}
        with:
          ref: ${{ github.event.inputs.branch }}
      - name: Cache Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-
      - name: Set up Java 21 (for build)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Build with Maven
        id: build
        shell: bash
        if: ${{ github.event.inputs.prepare_only != 'true' }}
        run: |
          set -euo pipefail
          chmod +x ./mvnw || true
          ./mvnw -ntp -B -DskipTests package
          JAR_PATH=$(ls -1 target/*.jar | grep -v sources | grep -v original | head -n1)
          echo "jar_path=$JAR_PATH" >> "$GITHUB_OUTPUT"
          echo "Built: $JAR_PATH"

      - name: Prepare SSH key
        shell: bash
        run: |
          umask 077
          echo "${{ secrets.EC2_SSH_KEY }}" > ssh_key.pem
          chmod 600 ssh_key.pem

      - name: Copy JAR to EC2 (~/app/edupress.jar)
        shell: bash
        if: ${{ github.event.inputs.prepare_only != 'true' }}
        run: |
          JAR="${{ steps.build.outputs.jar_path }}"
          if [ -z "$JAR" ]; then echo "Missing jar path" >&2; exit 1; fi
          ssh -i ssh_key.pem -o StrictHostKeyChecking=no "${{ env.EC2_USER }}@${{ env.EC2_HOST }}" "mkdir -p ~/app"
          echo "Local JAR sha256:" $(sha256sum "$JAR" | awk '{print $1}')
          if ! scp -i ssh_key.pem -o StrictHostKeyChecking=no "$JAR" "${{ env.EC2_USER }}@${{ env.EC2_HOST }}:~/app/edupress.jar"; then
            echo "SCP failed" >&2; exit 1; fi
          ssh -i ssh_key.pem -o StrictHostKeyChecking=no "${{ env.EC2_USER }}@${{ env.EC2_HOST }}" "echo -n 'Remote JAR sha256: '; sha256sum ~/app/edupress.jar | awk '{print \$1}'"
      - name: Upload remote deploy script
        shell: bash
        run: |
          scp -i ssh_key.pem -o StrictHostKeyChecking=no scripts/remote-deploy.sh "${{ env.EC2_USER }}@${{ env.EC2_HOST }}:~/app/deploy.sh"
          ssh -i ssh_key.pem -o StrictHostKeyChecking=no "${{ env.EC2_USER }}@${{ env.EC2_HOST }}" "chmod +x ~/app/deploy.sh"
      - name: Configure and restart service on EC2
        shell: bash
        run: |
          ssh -i ssh_key.pem -o StrictHostKeyChecking=no "${{ env.EC2_USER }}@${{ env.EC2_HOST }}" \
            "# LOCAL_DB false -> skip local Postgres provisioning; using external DB secrets
             PREPARE_ONLY='${{ github.event.inputs.prepare_only || 'false' }}' \
             LOCAL_DB='${{ env.LOCAL_DB }}' \
             DB_NAME='${{ env.DB_NAME }}' \
             DB_USERNAME='${{ secrets.DB_USERNAME || env.DB_USERNAME }}' \
             DB_PASSWORD='${{ secrets.DB_PASSWORD }}' \
             DB_PASSWORD_B64='${{ secrets.DB_PASSWORD_B64 }}' \
             SERVER_PORT='8080' \
             DB_URL='${{ secrets.DB_URL }}' \
             JWT_BASE64_SECRET='${{ secrets.JWT_BASE64_SECRET }}' \
             ADMIN_EMAIL='${{ secrets.ADMIN_EMAIL }}' \
             ADMIN_PASSWORD='${{ secrets.ADMIN_PASSWORD }}' \
             bash ~/app/deploy.sh"

      - name: Fallback start (nohup) if systemd inactive
        if: ${{ github.event.inputs.prepare_only != 'true' }}
        shell: bash
        run: |
          ssh -i ssh_key.pem -o StrictHostKeyChecking=no "${{ env.EC2_USER }}@${{ env.EC2_HOST }}" "if ! systemctl is-active --quiet edupress; then echo '[Fallback] systemd inactive, starting manual java process'; nohup java -jar ~/app/edupress.jar --server.port=${{ env.SERVER_PORT }} > ~/app/app.nohup.log 2>&1 & sleep 5; pgrep -f edupress.jar || echo '[Fallback] process not found'; fi"

      - name: Health check (management /health)
        shell: bash
        if: ${{ github.event.inputs.prepare_only != 'true' }}
        run: |
          set -e
          echo "Checking http://${{ env.EC2_HOST }}:${{ env.SERVER_PORT }}/management/health/liveness"
          for i in {1..20}; do
            if curl -fsS --max-time 3 "http://${{ env.EC2_HOST }}:${{ env.SERVER_PORT }}/management/health/liveness" >/dev/null; then
              echo "App is reachable"
              exit 0
            fi
            sleep 3
          done
          echo "App not reachable after timeouts; fetching remote diagnostics" >&2
          ssh -i ssh_key.pem -o StrictHostKeyChecking=no "${{ env.EC2_USER }}@${{ env.EC2_HOST }}" "echo '--- systemctl status edupress'; systemctl status edupress --no-pager || true; echo '--- last journal'; journalctl -n 80 -u edupress --no-pager || true; echo '--- listening ports'; (ss -ltnp 2>/dev/null || netstat -tlnp 2>/dev/null) | grep -E '(:${{ env.SERVER_PORT }}|java)' || true; echo '--- running java ps'; ps -ef | grep java || true; echo '--- env file'; ls -l ~/app/edupress.env; head -n 20 ~/app/edupress.env || true; echo '--- tail manual log'; tail -n 60 ~/app/app.nohup.log 2>/dev/null || true"
          exit 1
